apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'digital.wup.android-maven-publish'

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 3
        versionName "1.0.3.2"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:26.1.0'
    compile 'com.android.volley:volley:1.1.1'
    compile 'com.google.code.gson:gson:2.8.0'
}

// Bintray Setup
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    publications = ['OdooAPI']

    pkg {
        repo = 'api'
        name = 'odoo-api'

        userOrg = 'openongobox'
        desc = 'Odoo Android API (JSON RPC) Connector library'

        websiteUrl = 'http://www.oogbox.com'
        issueTrackerUrl = 'https://github.com/oogbox/odoo-mobile-api/issues'
        vcsUrl = 'https://github.com/oogbox/odoo-mobile-api.git'

        licenses = ["AGPL-V3"]
        publish = true
        publicDownloadNumbers = true

        version {
            name = "1.0.3.2"
            desc = "Odoo API Connector Library 1.0.3.2"
        }
    }
}

publishing {
    publications {
        OdooAPI(MavenPublication) {
            from components.android
            groupId 'com.oogbox.api'
            artifactId 'odoo'
            version '1.0.3.2'
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
    // options.encoding = 'UTF-8'
}

artifacts {
    archives javadocJar
    archives sourcesJar
}